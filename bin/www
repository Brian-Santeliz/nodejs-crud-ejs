#!/usr/bin/env node

/**
 * Modulo de dependencias.
 */

var app = require('../app');
var debug = require('debug')('crud-mysql:server');
var http = require('http');

/**
 * Obtener el puerto y almacenarlo en express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Crea el servidor HTTP.
 */

var server = http.createServer(app);

/**
 * Escuchando en todas las interfaces de red.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normaliza un puerto en un nÃºmero, cadena o falso.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // nombre de tunel
    return val;
  }

  if (port >= 0) {
    // numero de puerto
    return port;
  }

  return false;
}

/**
 * Detector de eventos para el evento "error" del servidor HTTP.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Manejo de errores
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Detector de eventos para el evento "escucha" del servidor HTTP.
 */

function onListening() {
  console.log("servidor en linea")
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
